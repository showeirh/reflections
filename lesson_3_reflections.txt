1- When would you want to create a remote repository rather than keeping all your work local?

     I would create a remote repo if I want to collaborate with other developers on the project.

2-   Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

  Like committing on your local repo, pulling changes is to fetch commits from and sync with the remote. When I wish to pull changes, I want it to be the completed work which often takes more than one commit to complete a working feature. Hence, I prefer to pull changes manually, whenever I learn that the work is complete; and avoid pulling changes in patches if done automatically.

3- Describe the differences between forks, clones, and branches. When would you use one instead of another?

     Forks: is a Github feature where you copy a hosted repo into your remote repo on Github-- that is to diverge from the original repo, which allows one to do his own work on the forked repo.

     Clone: is to make a copy of the original repo either from Github to your local repo or from your local to another spot in the same machine.

     Branches: is a commit/repo feature where you diverge your line of development.

4- What is the benefit of having a copy of the last known state of the remote stored locally?

	 Being in sync with the remote repo is what Git is all about-- a distributed version control system. Developers will have the benefits of working while off-line and push later on. Also if things were screwed up on any machine, a developer can clone back repos from other remotes.

5- How would you collaborate without using Git or Github? What would be easier, and what would be harder?

     Other than using a repository hosting service, collaboration is best done with a middle host between collaborators for code sharing. Such a middle host could be emails where code could be sent and received, but definitely would be unprofessional, slower, and harder than Github. I cannot really suggest an easier and more professional way for code review other than Github.

6- When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

     I would diverge from master branch when I'm doing experimental changes to a project. Then, I'll merge the new branch into master when I'm all set. That way I'll keep the master branch clean and in order. I don't see any benefits in doing experimental changes in the master branch.